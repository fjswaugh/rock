#pragma once

#include "types.h"
#include <utility>

namespace rock
{

auto generate_moves(Board const& board, Player player) -> MoveList;
auto count_moves(Board const& board, Player player_to_move, int level = 1) -> std::size_t;
auto is_legal_move(Move, Board const&, Player) -> bool;

auto are_pieces_all_together(BitBoard board) -> bool;
auto get_game_outcome(Board const&, Player to_move) -> GameOutcome;

/**
 * Player to move, positive result is good for player
 */
auto evaluate_position_quick(Board const& board, Player player) -> double;
auto evaluate_position_minmax(Board const& board, Player player, int depth) -> double;
auto recommend_move(Board const& board, Player player) -> std::pair<Move, double>;

/**
 * Normalize a score generated by the above functions so that positive always
 * means that White is winning
 */
auto normalize_score(double score, Player player) -> double;

}  // namespace rock
